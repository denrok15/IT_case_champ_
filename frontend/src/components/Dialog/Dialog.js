import React, {useState, useEffect} from "react";
import axios from "axios";
import Buttoni from "../Buttoni/Buttoni";
import Smska from "../Smska/Smska";
import Buttoniany from "../Buttoniany/Buttoniany";
import Export from "../Export/Export";
import ButtonsForAccept from "../ButtonsForAccept/ButtonsForAccept";
import TradeCurrency from "../TradeCurrency/TradeCurrency";
import './Dialog.css'
import Deposit from "../Deposit/Deposit";

export default function Dialog({yourmessage}) {
    const [valutate, setValutate] = useState('');
    const [message, setMessage] = useState('');
    const [banker, setBank] = useState('');
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState("");
    const [country, setCountry] = useState('');

    const comissia = () => {
        setMessages(prev => [
            ...prev,
            {sender: 'user-message', text: '–†–∞—Å—Å—á–∏—Ç–∞–π –∫–æ–º–∏—Å—Å–∏—é'},
            {
                sender: 'bot-message',
                component: (
                    <Buttoni
                        first="–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É"
                        buttons={['–†—É–±–ª–∏', '–ï–≤—Ä–æ', '–î–æ–ª–ª–∞—Ä—ã']}
                        onClickHandler={countries}
                    />
                ),
            },
        ]);
    };

    useEffect(() => {
        setMessages([
            {sender: 'user-message', text: yourmessage},
            {
                sender: 'bot-message',
                component: (
                    <Buttoniany
                        first="–ü—Ä–∏–≤–µ—Ç, —Å —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ—á—å?"
                        buttons={['–ö–æ–º–∏—Å—Å–∏—è', '–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã', '–í–∫–ª–∞–¥—ã –∏ —Å—á–µ—Ç–∞']}
                        onClickHandler={[comissia, trade_valuta, vkladiandscheta]}
                    />
                ),
            },
        ]);
    }, []);
    const countries = (valu) => {
        setValutate(valu);
        setMessages(prev => [
            ...prev,
            {sender: 'user-message', text: valu},
            {
                sender: 'repeat-bot-message', component: (
                    <>
                        <p>–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥</p>
                        <Export func={valuta}/>
                    </>
                )
            }
        ]);
    }
    const vkladiandscheta = (info) => {
        setMessages(prev => [...prev,
            {sender: 'user-message', text: info},
            {
                sender: 'bot-message', component: (
                    <Buttoniany
                        first={'–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç '}
                        buttons={['–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç', '–í–∫–ª–∞–¥—ã']}
                        onClickHandler={[nakopschet, vklad]}
                    />
                )
            }
        ])
    };
    const nakopschet = (text) => {
        setMessages(prev => [...prev,
            {sender: 'user-message', text: text},
            {
                sender: 'bot-message', component: (
                    <Buttoniany
                        first={'–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç '}
                        buttons={['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–∞–∑–∞–¥']}
                        onClickHandler={[nakopschetinfo, vkladiandscheta]}
                    />
                )
            }
        ])
    }
    const nakopschetinfo = (info) => {
        setMessages(prev => [...prev,
            {sender: 'user-message', text: info},
        ])
    }
    const vklad = (text) => {
        setMessages(prev => [...prev,
            {sender: 'user-message', text: text},
            {
                sender: 'bot-message', component: (
                    <>
                        <div className="promo-banner">
                            <h2>üíº –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥?</h2>
                            <p>
                                <strong>–í–∫–ª–∞–¥—ã</strong> –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ <strong>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –≤
                                –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</strong>,
                                –Ω–æ –∏ <strong>–ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å</strong> –∏—Ö –∑–∞ —Å—á—ë—Ç <strong>—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö
                                –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π</strong>.<br/>
                                –≠—Ç–æ <strong>–Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—É–¥—É—â–µ–µ</strong> –∏ <strong>–∑–∞—Å—Ç–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏
                                —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤–∞—Å</strong> ‚Äî –¥–∞–∂–µ –≤–æ —Å–Ω–µ! üåôüí∏
                            </p>
                        </div>
                        <Buttoniany
                            first={''}
                            buttons={['–ü–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞']}
                            onClickHandler={[helpchoosevklad, categories, privileges]}
                        />
                    </>

                )
            }
        ])
    }
    const helpchoosevklad = (text) => {
        setMessages(prev => [...prev,
            {sender: 'user-message', text: text},
        ])
    }
    const categories = (text) => {
        setMessages(prev => [...prev,
            {sender: 'user-message', text: text},
            {
                sender: 'bot-message', component: (
                    <>
                        <p>–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–∞—à–µ–º –±–∞–Ω–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ </p>
                        <a href="https://www.gazprombank.ru/personal/increase/deposits/">https://www.gazprombank.ru/personal/increase/deposits/</a>
                    </>

                )
            }
        ])
    }
    const privileges = (text) => {
        setMessages(prev => [...prev,
            {sender: 'user-message', text: text},
            {
                sender: 'bot-message', component: (
                    <Deposit/>
                )
            }
        ])
    }

    const trade_valuta = () => {
        setMessages(prev => [
            ...prev,
            {sender: 'user-message', text: '–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã'},
            {
                sender: 'change-moneta', component: (<TradeCurrency/>)
            },
            {
                sender: 'repeat-bot-message', component: (
                    <Buttoniany
                        first="–ú–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º?"
                        buttons={['–ö–æ–º–∏—Å—Å–∏—è', '–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã', '–í–∫–ª–∞–¥—ã']}
                        onClickHandler={[comissia, trade_valuta, vkladiandscheta]}
                    />
                )
            }
        ]);
    };

    const valuta = (country) => {
        setCountry(country)
        setMessages(prev => [
            ...prev,
            {sender: 'user-message', text: country},
            {sender: 'bot-message', text: '–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏'},
        ]);
    };

    const Sendtoback = async (data) => {
        try {
            const response = await axios.post("http://127.0.0.1:8000/", data, {
                    headers: {"Content-Type": "application/json"},
                })

            ;
            setMessages(prev => [...prev, {
                sender: 'bot-message', component: (
                    <>
                        <p>–í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç: undefined </p>
                    </>
                )
            }])
            console.log("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", response.data);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        }
    };

    const bank = (bankik, summa) => {
        setBank(bankik);
        setMessages(prev => [
            ...prev,
            {sender: 'user-message', text: bankik},
            {
                sender: 'bot-message',
                component: (
                    <>
                        <h3>‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ</h3>
                        <p>üíµ –í–∞–ª—é—Ç–∞: {valutate}</p>
                        <p>üåç –°—Ç—Ä–∞–Ω–∞: {country}</p>
                        <p>üí∞ –°—É–º–º–∞: {summa}</p>
                        <p> üè¶ –ë–∞–Ω–∫: {bankik}</p>
                        <button className="button" onClick={() => Sendtoback({valutate, summa, bank: bankik, country})}>
                            –í—Å–µ –≤–µ—Ä–Ω–æ
                        </button>
                    </>

                ),
            },
        ]);
    };
    const handleSend = (e) => {
        e.preventDefault();
        const trimmed = input.trim();
        if (!trimmed) return;
        setMessages(prev => [...prev, {sender: 'user-message', text: trimmed}]);
        if (valutate && !message) {
            const msg = trimmed;
            if (!isNaN(msg) && isFinite(msg) && Number(msg) > 0) {
                if (valutate && !message) {
                    setMessage(msg);
                    setMessages(prev => [
                        ...prev,
                        {
                            sender: 'bot-message',
                            component: (
                                <ButtonsForAccept
                                    first={'–í—ã–±–µ—Ä–∏ –±–∞–Ω–∫'}
                                    buttons={['–°–±–µ—Ä–±–∞–Ω–∫', '–¢-–±–∞–Ω–∫', '–°–æ–≤–∫–æ–º–±–∞–Ω–∫']}
                                    onClickHandler={bank}
                                    sums={msg}
                                />
                            ),
                        },
                    ]);
                }
            } else {
                setMessages(prev => [
                    ...prev,
                    {sender: 'bot-message', text: '–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ'},
                ]);
            }
        }
        setInput("");
    };
    return (
        <>
            <Smska
                input={input}
                handleSend={handleSend}
                setInput={setInput}
                messages={messages}
            />
            <button

                onClick={() =>
                    window.location.reload()}
                className="button-cleaning"
            >
                –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
            </button>
        </>
    );
}
